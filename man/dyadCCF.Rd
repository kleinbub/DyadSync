% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rIP_Sync_CCFBest.R
\name{dyadCCF}
\alias{dyadCCF}
\title{#' Title
#'
#' @param x 
#' @param signals 
#' @param lagSec 
#' @param winSec 
#' @param incSec 
#' @param accelSec 
#' @param weight_type 
#' @param simplify 
#'
#' @return
#' @export
#'
#' @examples
ccfBest = function(x, signals="all", lagSec,winSec,incSec,accelSec,weight_type=c("center","free","off"),simplify = T)
{
  UseMethod("ccfBest",x)
}}
\usage{
dyadCCF(signal, lagSec, winSec, incSec, simplify, outputName = "CCFBest")
}
\description{
#' @export
ccfBest.DyadExperiment = function(experiment, signals, lagSec,winSec,incSec,accelSec,weight_type,simplify){
  cat("\r\nccfBest routine | moving windows cross-correlation with sync maximizing\r\nWith the chosen settings,
      the best lag is able to change by +/-",
      (accelSec)/(incSec),
      "seconds each second of signal." )
  cat(paste0("\r\nHigh Sync at positive lags implies that the ",s2Name(experiment[[1]]), " follows the ",
             s1Name(experiment[[1]]),"\r\n"))
  nSessions = length(experiment)
  experiment2 = Map(function(session,iSession){
    if(signals=="all") signals = names(session)
    cat("\r\n",paste(dyadId(session),session(session)))
    session[signals] = Map(function(signal,iSignal){
      cat(" |",name(signal))
      signal = ccfBest(signal, lagSec,winSec,incSec,accelSec,weight_type,simplify)
      return(signal)
    }, session[signals])
    #prog(iSession,nSessions)
    return(session)
  },experiment,seq_along(experiment))
  cat("\r\nDone ;)")
  attributes(experiment2)=attributes(experiment)
  return(experiment2)
  if(lagSec > 5)  warning("SC latency from stimuli is between 1 and 5 sec. Bigger lags are robably wrong in a stimulus-response perspective")
  
}
}
\details{
#' @export
ccfBest.DyadSignal = function(signal, lagSec,winSec,incSec,accelSec,weight_type,simplify=T){
  
  signal$CCFBest = CCFBest(NULL,NULL,NULL, lagSec,winSec,incSec,accelSec,weight_type)
  
  signal = dyadCCF(signal,lagSec,winSec,incSec,simplify)
  signal = vectorBestLag(signal,accelSec,weight_type)
  # if(simplify)
  #   signal = reduceCcfLags(signal)
  # if(interpolate){
  #   signal$ccf$ccfmat = winInter(list(signal$ccf$ccfmat), winSec = signal$ccf$settings$winSec, incSec = signal$ccf$settings$incSec, sampRate = signal$sampRate)[[1]]
  #   colnames(signal$ccf$ccfmat) = gsub("[.]","-",colnames(signal$ccf$ccfmat))
  #   signal$ccf$sampRate = signal$sampRate
  #   }
  signal
}
}
